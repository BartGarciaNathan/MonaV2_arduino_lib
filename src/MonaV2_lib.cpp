/*
  MonaV2_lib.cpp - Implementation of the library for MonaV2 robot
  Created by Bart Garcia, November 2019.
  bart.garcia.nathan@gmail.com
  Released into the public domain.
*/
#include "MonaV2_lib.h"

/* ----Library functions implementation for MonaV2 in C style----*/
//Mona Init function - setup pinModes
void MonaV2_init(void){
	//Set PinModes
	pinMode(Mot_right_forward, OUTPUT);		//Motor control outputs
	pinMode(Mot_right_backward, OUTPUT);	//Motor control outputs
	pinMode(Mot_left_forward, OUTPUT);		//Motor control outputs
	pinMode(Mot_left_backward, OUTPUT);		//Motor control outputs
	pinMode(Mot_right_feedback, INPUT);		//Motor feedback inputs
	pinMode(Mot_left_feedback, INPUT);		//Motor feedback inputs
	pinMode(IR_enable, OUTPUT);				//IR enable output
	pinMode(LED_D2, OUTPUT);				//LED output
	pinMode(LED_D3, OUTPUT);				//LED output
	//Setup PWM channels for motors
	ledcSetup(Mot_rig_for_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_right_forward, Mot_rig_for_pwm);//PWM settings MRF
	
	ledcSetup(Mot_rig_bac_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_right_backward, Mot_rig_bac_pwm);//PWM settings MRB
	
	ledcSetup(Mot_lef_for_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_left_forward, Mot_lef_for_pwm);//PWM settings MLF
	
	ledcSetup(Mot_lef_bac_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_left_backward, Mot_lef_bac_pwm);//PWM settings MLB
	//Turn off the Motor
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, 0);
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, 0);
    //Disable IR to save energy
    digitalWrite(IR_enable,LOW);
    //Turn OFF LEDs
    digitalWrite(LED_D2,LOW);
    digitalWrite(LED_D3,LOW);
}
//TODO : Add PWM values to the motor speeds
//Right Motor
void Right_mot_forward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_rig_for_pwm, speed);
	ledcWrite(Mot_rig_bac_pwm, 0);
}

void Right_mot_backward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, speed);
}

void Right_mot_stop(void){
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, 0);
}
//Left Motor
void Left_mot_forward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_lef_for_pwm, speed);
	ledcWrite(Mot_lef_bac_pwm, 0);
}

void Left_mot_backward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, speed);
}
void Left_mot_stop(void){
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, 0);
}

//Both motors
void Motors_forward(int speed){
	Right_mot_forward(speed);
	Left_mot_forward(speed);
}

void Motors_backward(int speed){
	Right_mot_backward(speed);
	Left_mot_backward(speed);
}

void Motors_spin_left(int speed){
	Right_mot_forward(speed);
	Left_mot_backward(speed);
}

void Motors_spin_right(int speed){
	Right_mot_backward(speed);
	Left_mot_forward(speed);
}

void Motors_stop(void){
	Right_mot_stop();
	Left_mot_stop();
}

//IR sensors
void Enable_IR(void){
	digitalWrite(IR_enable,HIGH);
}

void Disable_IR(void){
	digitalWrite(IR_enable,LOW);
}

int Read_IR(int IR_number){
	if (IR_number>= 1 && IR_number<6){ //Ensure the IR number is within range
		if(IR_number==1){
			return analogRead(IR1_sensor);//Return value for IR1_sensor
		}
		if(IR_number==2){
			return analogRead(IR2_sensor);//Return value for IR2_sensor
		}
		if(IR_number==3){
			return analogRead(IR3_sensor);//Return value for IR3_sensor
		}
		if(IR_number==4){
			return analogRead(IR4_sensor);//Return value for IR4_sensor
		}
		if(IR_number==5){
			return analogRead(IR5_sensor);//Return value for IR5_sensor
		}
	}
	else {
		return 0; // Return a 0 as an error
	}
}

//Battery Voltage
int Batt_Vol(void){
	return analogRead(Batt_Vol_pin);
	//TODO : Add here the conversion to the ratio generated by the Resistors
}

//LEDS control
//TODO : Add PWM values to the LEDs
void LED2_ON(void){
	digitalWrite(LED_D2,HIGH);	
}

void LED2_OFF(void){
	digitalWrite(LED_D2,LOW);
}

void LED3_ON(void){
	digitalWrite(LED_D3,HIGH);	
}

void LED3_OFF(void){
	digitalWrite(LED_D3,LOW);
}

/* ----Library interface implementation for MonaV2 in Arduino Library style----*/
//MonaV2 constructor, set up Pinmodes
MonaV2::MonaV2(void){
  //Set PinModes
	pinMode(Mot_right_forward, OUTPUT);		//Motor control outputs
	pinMode(Mot_right_backward, OUTPUT);	//Motor control outputs
	pinMode(Mot_left_forward, OUTPUT);		//Motor control outputs
	pinMode(Mot_left_backward, OUTPUT);		//Motor control outputs
	pinMode(Mot_right_feedback, INPUT);		//Motor feedback inputs
	pinMode(Mot_left_feedback, INPUT);		//Motor feedback inputs
	pinMode(IR_enable, OUTPUT);				//IR enable output
	pinMode(LED_D2, OUTPUT);				//LED output
	pinMode(LED_D3, OUTPUT);				//LED output
	//Setup PWM channels for motors
	ledcSetup(Mot_rig_for_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_right_forward, Mot_rig_for_pwm);//PWM settings MRF
	
	ledcSetup(Mot_rig_bac_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_right_backward, Mot_rig_bac_pwm);//PWM settings MRB
	
	ledcSetup(Mot_lef_for_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_left_forward, Mot_lef_for_pwm);//PWM settings MLF
	
	ledcSetup(Mot_lef_bac_pwm,Mot_freq,Mot_res);
	ledcAttachPin(Mot_left_backward, Mot_lef_bac_pwm);//PWM settings MLB
	//Turn off the Motor
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, 0);
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, 0);
    //Disable IR to save energy
    digitalWrite(IR_enable,LOW);
    //Turn OFF LEDs
    digitalWrite(LED_D2,LOW);
    digitalWrite(LED_D3,LOW);
}
//TODO : Add PWM values to the motor speeds
//Right Motor
void MonaV2::Right_mot_forward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_rig_for_pwm, speed);
	ledcWrite(Mot_rig_bac_pwm, 0);
}

void MonaV2::Right_mot_backward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, speed);
}

void MonaV2::Right_mot_stop(void){
	ledcWrite(Mot_rig_for_pwm, 0);
	ledcWrite(Mot_rig_bac_pwm, 0);
}
//Left Motor
void MonaV2::Left_mot_forward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_lef_for_pwm, speed);
	ledcWrite(Mot_lef_bac_pwm, 0);
}

void MonaV2::Left_mot_backward(int speed){
	if(speed>255){
		speed = 255; //Limit max speed to the 8 bit resolution
	}
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, speed);
}
void MonaV2::Left_mot_stop(void){
	ledcWrite(Mot_lef_for_pwm, 0);
	ledcWrite(Mot_lef_bac_pwm, 0);
}

//Both motors
void MonaV2::Motors_forward(int speed){
	Right_mot_forward(speed);
	Left_mot_forward(speed);
}

void MonaV2::Motors_backward(int speed){
	Right_mot_backward(speed);
	Left_mot_backward(speed);
}

void MonaV2::Motors_spin_left(int speed){
	Right_mot_forward(speed);
	Left_mot_backward(speed);
}

void MonaV2::Motors_spin_right(int speed){
	Right_mot_backward(speed);
	Left_mot_forward(speed);
}

void MonaV2::Motors_stop(void){
	Right_mot_stop();
	Left_mot_stop();
}

//IR sensors
void MonaV2::Enable_IR(void){
	digitalWrite(IR_enable,HIGH);
}

void MonaV2::Disable_IR(void){
	digitalWrite(IR_enable,LOW);
}

int MonaV2::Read_IR(int IR_number){
	if (IR_number>= 1 && IR_number<6){ //Ensure the IR number is within range
		if(IR_number==1){
			return analogRead(IR1_sensor);//Return value for IR1_sensor
		}
		if(IR_number==2){
			return analogRead(IR2_sensor);//Return value for IR2_sensor
		}
		if(IR_number==3){
			return analogRead(IR3_sensor);//Return value for IR3_sensor
		}
		if(IR_number==4){
			return analogRead(IR4_sensor);//Return value for IR4_sensor
		}
		if(IR_number==5){
			return analogRead(IR5_sensor);//Return value for IR5_sensor
		}
	}
	else {
		return 0; // Return a 0 as an error
	}
}

//Battery Voltage
int MonaV2::Batt_Vol(void){
	return analogRead(Batt_Vol_pin);
	//TODO : Add here the conversion to the ratio generated by the Resistors
}

//LEDS control
//TODO : Add PWM values to the LEDs
void MonaV2::LED2_ON(void){
	digitalWrite(LED_D2,HIGH);	
}

void MonaV2::LED2_OFF(void){
	digitalWrite(LED_D2,LOW);
}

void MonaV2::LED3_ON(void){
	digitalWrite(LED_D3,HIGH);	
}

void MonaV2::LED3_OFF(void){
	digitalWrite(LED_D3,LOW);
}
